p.332 #1  Produce a figure for the case when then input file to be 
sorted is (12, 2, 16, 30, 8, 28, 4, 10, 20, 6, 18).
-----------------------------------------------------------
 R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10  left  right
[12   2  16  30   8  28   4  10  20   6  18]   0     10
[ 4   2   6  10   8] 12 [28  30  20  16  18]   0      4
[ 2]  4 [ 6  10   8] 12 [28  30  20  16  18]   0      0
  2   4 [ 6  10   8] 12 [28  30  20  16  18]   2      4
  2   4   6 [10   8] 12 [28  30  20  16  18]   3      4
  2   4   6   8  10  12 [28  30  20  16  18]   6     10
  2   4   6   8  10  12 [16  18  20] 28 [30]   6      8
  2   4   6   8  10  12  16 [18  20] 28 [30]   7      8
  2   4   6   8  10  12  16  18  20  28 [30]  10     10
  2   4   6   8  10  12  16  18  20  28  30 
-----------------------------------------------------------
=====================================================================

p.332 #5  Give an example to show that quick sort is unstable.

Sample answer:

  Let list[0].key=list[1].key=1; list[i].index=i.
  Then after quick sort we have list[0].index=1 and list[1].index=0.

Typical mistake:

  Let list[0].key=2; list[1].key=list[2].key=1; list[i].index=i.
  After the first call we have list in order [2][1][0].  But then the
  left most two records must be sorted and we will get a list in
  order [1][2][0] -- the order is preserved.
======================================================================

p.347 #5  Write an algorithm to perform a natural merge sort.
Give Tp for an initially sorted list, and for the worst case.
How many additional space is needed?

void  natural_merge_sort ( element list[], int n )
{  Initialize length[] such that length[i] stores the length of the
    sorted sublist starting from i;
   While ( length[0] < n )
   { merge adjacent pairs of sublists from list[] into extra[]
      and adjust length[] accordingly;
     merge adjacent pairs of sublists from extra[] into list[]
      and adjust length[] accordingly;
   }
}

    If list[] is initially sorted, then the while loop will not be
executed, hence Tp=O(n).
    The worst case happens if list[] is initially in inverse order.
Tp=O(n+n*(log n)).  Note: if length[] is not saved, the time complexity
might be doubled.
    The additional space is for extra[] and length[], which is O(n).
======================================================================

p.349 #1  Show that heapsort is unstable.

Examples: 
1[1], 1[2], 1[3] ==> 1[3], 1[1], 1[2]
1,2,2;  2,1,1;  1,2,1.

Typical mistakes:
1[1], 1[2] ==> 1[2], 1[1] ...... ==> 1[1], 1[2]
2,1,2;  2,2,1;  1,1,2.
======================================================================

p.356 #6  Rewrite radix_sort so that the radix is 2.  Use the BIT
macro to extract the bits.  Try this version with keys of type
long int.  How quick is it?

#define MAX_DIGIT  32 /* for long int */
#define RADIX_SIZE  2

/* BIT(x,i) extracts the i-th bit (counting from left to right) of x */

#define BIT(x, i)  ( (x>>(MAX_DIGIT-i-1)) & 1 )  or ((x)<<(i)>>(MAX_DIGIT-1))

/* right-shift x by n bits is equivalent to divide x by 2^n */
/* but is much faster than division */

typedef struct list_node  *list_pointer;
typedef struct list_node {
    long int  key;
    list_pointer  link;
}
The program is the same as Program 7.15 on p.355, except that
                 digit = ptr->key[i];
is replaced by
                 digit = BIT(ptr->key, i);

Tp=O(32(2+n)).
Note: If radix 10 is used for a long int key, then MAX_DIGIT should
      be 10.  Tp=(10(10+n)).
======================================================================

p.366 #4  Rewrite quicksort so that it creates a table that contains 
the sorted order of the list.  Use table_sort to rearrange the records
into the sorted order specified by table.

void quicksort (element list[], int table[], int left, int right)
{  ...
   int  temp;
   ...
     pivot = list[ table[left] ].key;
   ...
     while ( list[ table[i] ].key < pivot );
   ...
     while ( list[ table[j] ].key > pivot );
   ...
       SWAP(table[i], table[j], temp);
   ...
     SWAP(table[left], table[j], temp);
     quicksort(list, table, left, j-1);
     quicksort(list, table, j+1, right);
}

void sort_by_quicksort_and_table ( element list[], int n)
{  int i, table[n];
   for (i=0; i<n; i++)
     table[i] = i;  /* initialize table */
   quicksort(list, table, 0, n-1);
   table_sort(list, n, table);
}    